net0 <- network.collapse(toy_epi_sim, at = 0)
# 任意の時点でネットワークを取得
net0 <- network.collapse(net_dynamic_interactions, at = 0)
# network → igraph に変換
igraph_net <- asIgraph(net0)
# Fruchterman-Reingold レイアウトを計算
coords <- layout_with_fr(igraph_net)
# 必要なパッケージを読み込み
library(ndtv)
library(network)
library(igraph)
library(intergraph)
# 任意の時点でネットワークを取得
net0 <- network.collapse(net_dynamic_interactions, at = 0)
# network → igraph に変換
igraph_net <- asIgraph(net0)
# Fruchterman-Reingold レイアウトを計算
coords <- layout_with_fr(igraph_net)
# ↓ coords はノードの順番に対応した座標行列
# d3movieのレンダリング（ノード位置を固定）
render.d3movie(
toy_epi_sim,
displaypars = list(layout.par = list(coords = coords)),
usearrows = FALSE,
render.par = list(tween.frames = 10, show.time = TRUE),
output.mode = 'htmlWidget'
)
# 必要なパッケージを読み込み
library(ndtv)
library(network)
library(igraph)
library(intergraph)
# 任意の時点でネットワークを取得
net0 <- network.collapse(net_dynamic_interactions, at = 0)
# network → igraph に変換
igraph_net <- asIgraph(net0)
# Fruchterman-Reingold レイアウトを計算
coords <- layout_with_fr(igraph_net)
# ↓ coords はノードの順番に対応した座標行列
# d3movieのレンダリング（ノード位置を固定）
render.d3movie(
net_dynamic_interactions,
displaypars = list(layout.par = list(coords = coords)),
usearrows = FALSE,
render.par = list(tween.frames = 10, show.time = TRUE),
output.mode = 'htmlWidget'
)
?set.network.attribute
ggplot(class_net_sna, arrow.gap = .01,
aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "lightgray",
arrow = arrow(length = unit(5, "pt"), type = "closed")) +
geom_nodes(color = cols) +
theme_blank() +
geom_density_2d()
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_ego_dat.csv"
ego_dat <- read.csv(file = url1, stringsAsFactors = F)
ego_dat[1:10, c("CASEID", "AGE", "EDUC", "RACE", "SEX", "HAPPY", "NUMGIVEN")]
---
title: "Network Analysis with R"
ego_dat <- ego_dat[!is.na(ego_dat$NUMGIVEN), ]
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alter_dat.csv"
alter_dat <- read.csv(file = url2, stringsAsFactors = F)
alter_dat[1:10, c("CASEID", "ALTERID", "AGE", "EDUC", "RACE", "SEX", "KIN")]
nrow(ego_dat)
nrow(alter_dat)
alteralter_dat <- read.csv(file = url3)
url3 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alteralter_dat.csv"
alteralter_dat <- read.csv(file = url3)
alteralter_dat[1:10, ]
pacman::p_load(egor)
egonetlist <-  egor(alters = alter_dat, egos = ego_dat,
aaties = alteralter_dat, alter_design = list(max = 5),
ID.vars = list(ego = "CASEID", alter ="ALTERID",
source = "ALTER1", target = "ALTER2"))
egonetlist
names(egonetlist)
egonetlist[["ego"]][, 1:5]
egonetlist[["alter"]][, 1:5]
egonetlist[["aatie"]]
dens <- ego_density(egonetlist)
head(dens)
alteralter_dat[alteralter_dat$CASEID == 19850001, ]
alteralter_dat[alteralter_dat$CASEID == 19850002, ]
library(igraph)
igraph_nets <- as_igraph(egonetlist)
igraph_nets[1:3]
vertex_attr(igraph_nets[[1]], "SEX")
alter_dat[alter_dat$CASEID == 19850001, "SEX"]
par(mfrow = c(1, 3))
purrr::walk(igraph_nets[1:3], plot)
plotfunc_colorgender <- function(nets){
# Arguments:
# nets: ego network of interest
# extracting the attribute from the ego network:
cols <- vertex_attr(nets, "SEX")
# now we use an ifelse statement to set color,
# light sky blue if gender equals female, blue otherwise:
cols <- ifelse(cols == "female", "lightskyblue", "blue")
# plotting ego network with nodes colored based on gender:
plot(nets, vertex.color = cols)
}
par(mfrow = c(1, 3))
purrr::walk(igraph_nets[1:3], plotfunc_colorgender)
prop_same_function <- function(alt.attr, ego.attr){
# Arguments:
# alt.attr: alter attributes for a given ego
# ego.attr: ego attributes
# taking ego attribute and comparing to alter
# attributes, summing up number of times they match
# ignoring missing data:
same <- sum(ego.attr == alt.attr, na.rm = T)
# calculating proportion of ego-alter pairs that match:
# just for alters with no missing data
prop_same <- same / sum(!is.na(alt.attr))
# making sure if ego is missing, then prop_same is also missing
prop_same[is.na(ego.attr)] <- NA
return(prop_same)
}
pmatch_sex <- comp_ply(egonetlist, alt.attr = "SEX", .f = prop_same_function,
ego.attr = "SEX")
head(pmatch_sex)
egonetlist_kin <- subset(egonetlist, egonetlist[["alter"]]$KIN == 1,
unit = "alter")
pmatch_sex_kin <- comp_ply(egonetlist_kin, alt.attr = "SEX",
.f = prop_same_function, ego.attr = "SEX")
egonetlist_nonkin <- subset(egonetlist, egonetlist[["alter"]]$KIN == 0,
unit = "alter")
pmatch_sex_nonkin <- comp_ply(egonetlist_nonkin, alt.attr = "SEX",
.f = prop_same_function, ego.attr = "SEX")
sexdat <- data.frame(pmatch_sex$result, pmatch_sex_kin$result,
pmatch_sex_nonkin$result)
head(sexdat)
pmatch_race <- comp_ply(egonetlist, alt.attr = "RACE",
.f = prop_same_function, ego.attr = "RACE") #all alters
pmatch_race_kin <- comp_ply(egonetlist_kin, alt.attr = "RACE",
.f = prop_same_function, ego.attr = "RACE") #kin
pmatch_race_nonkin <- comp_ply(egonetlist_nonkin, alt.attr = "RACE",
.f = prop_same_function, ego.attr = "RACE") #nonkin
racedat <- data.frame(pmatch_race$result, pmatch_race_kin$result,
pmatch_race_nonkin$result)
head(racedat)
---
title: "Network Analysis with R"
apply(sexdat, MARGIN = 2, FUN = summary)
apply(racedat, MARGIN = 2, FUN = summary)
ego_alter_dat <- data.frame(as_alters_df(egonetlist, include.ego.vars = TRUE))
head(ego_alter_dat)
cnames <- colnames(ego_alter_dat)
which_age_column <- which(colnames(ego_alter_dat) == "AGE")
which_educ_cat_column <- which(colnames(ego_alter_dat) == "EDUC_CATEGORICAL")
alter_columns <- which_age_column:which_educ_cat_column
cnames[alter_columns] <- paste(cnames[alter_columns], "_alter", sep = "")
colnames(ego_alter_dat) <- cnames
head(ego_alter_dat)
sextab <- table(ego_alter_dat[, "SEX_ego"], ego_alter_dat[, "SEX_alter"])
sextab
sum(diag(sextab)) / sum(sextab)
racetab <- table(ego_alter_dat[, "RACE_ego"], ego_alter_dat[, "RACE_alter"])
sum(diag(racetab)) / sum(racetab)
oddsratio_function <-  function(egoalter_tab, attribute) {
# Arguments:
# egoalter_tab: table of interest
# attribute: vector representing attribute of interest in the sample
# We first calculate the number of dyads that match and mismatch on the
# attribute based on the observed data.
# We calculate the number matching by summing up over the diagonal of the
# the table (as these are cases where ego and alter have the same value).
match <- sum(diag(egoalter_tab))
# We now calculate the number mismatching by taking the total number of
# dyads and subtracting the number that match (calculated above).
notmatch <- sum(egoalter_tab) - match
# Now we calculate our chance expectations, defined as what would happen
# if we randomly paired all respondents from the data (defined in the
# input attribute vector), and calculated how many of those
# pairs were the same (and different) on the attribute of interest.
# We first do a table on the attribute, to see how many people fall
# into each category.
freq <- table(attribute)
# We next calculate the total number of random pairings,
# assuming we pair all respondents with all respondents.
# This is simply the number of respondents times the number of
# respondents minus 1, as we assume we are not pairing
# people with themself.
total_dyads <- sum(freq) * (sum(freq) - 1)
# We now calculate the number of random pairings expected to
# match by chance.
# Formally, we take the number in each category (e.g., number of men) and
# multiply that number by itself (minus 1 as we again
# assume people are not paired with themself), showing
# how many pairs would be the same if we paired all respondents with all
# respondents. Remember that R will multiply things element-wise,
# so the following bit of code will take the first value in freq
# and multiply it by the first element in freq-1. We sum up the values
# to get the total number of dyads that are expected to match.
match_chance <- sum(freq * (freq - 1))
# We now calculate the number of dyads not matching by chance as the
# difference between the total number of dyads and
# those matching by chance.
notmatch_chance <-  total_dyads - match_chance
# And finally we can calculate the odds ratio of
# observed odds of matching to odds of matching by chance
or <- (match * notmatch_chance) / (notmatch * match_chance)
return(or)
}
oddsratio_function(egoalter_tab = sextab, attribute = ego_dat[, "SEX"])
oddsratio_function(egoalter_tab = racetab, attribute = ego_dat[, "RACE"])
oddsratio_function(egoalter_tab = racetab, attribute = ego_dat[, "RACE"])
#odds of matching for kin ties, gender
kin_sextab <- table(ego_alter_dat[ego_alter_dat$KIN == 1, "SEX_ego"],
ego_alter_dat[ego_alter_dat$KIN == 1, "SEX_alter"])
oddsratio_function(egoalter_tab = kin_sextab, attribute = ego_dat[, "SEX"])
#odds of matching for kin ties, race
kin_racetab <- table(ego_alter_dat[ego_alter_dat$KIN == 1, "RACE_ego"],
ego_alter_dat[ego_alter_dat$KIN == 1, "RACE_alter"])
oddsratio_function(egoalter_tab = kin_racetab, attribute = ego_dat[, "RACE"])
#odds of matching for non-kin ties, gender
nonkin_sextab <- table(ego_alter_dat[ego_alter_dat$KIN == 0, "SEX_ego"],
ego_alter_dat[ego_alter_dat$KIN == 0, "SEX_alter"])
oddsratio_function(egoalter_tab = nonkin_sextab, attribute = ego_dat[, "SEX"])
#odds of matching for non-kin ties, race
nonkin_racetab <- table(ego_alter_dat[ego_alter_dat$KIN == 0, "RACE_ego"],
ego_alter_dat[ ego_alter_dat$KIN == 0, "RACE_alter"])
oddsratio_function(egoalter_tab = nonkin_racetab, attribute = ego_dat[, "RACE"])
---
title: "Network Analysis with R"
oddsratio_function(egoalter_tab = sextab,
attribute = ego_dat$SEX[ego_dat$NUMGIVEN > 0])
sex_diversity <- alts_diversity_entropy(egonetlist, alt.attr = "SEX",
base = exp(1))
head(sex_diversity)
race_diversity <- alts_diversity_entropy(egonetlist, alt.attr = "RACE",
base = exp(1))
head(race_diversity)
sex_diversity[ego_dat$NUMGIVEN <= 1, "entropy"] <-  NA
race_diversity[ego_dat$NUMGIVEN <= 1, "entropy"] <-  NA
summary(sex_diversity[, "entropy"])
summary(race_diversity[, "entropy"])
mean_altereduc <- comp_ply(egonetlist, alt.attr = "EDUC", .f = mean,
na.rm = TRUE)
summary(mean_altereduc[, "result"])
ego_dat$HAPPY_FACTOR <- factor(ego_dat$HAPPY, levels = c(3, 2, 1),
labels = c("not too happy", "pretty happy",
"very happy"))
ego_dat$RACE_FACTOR <- factor(ego_dat$RACE, levels = c("white", "asian",
"black", "hispanic",
"other"))
ego_dat$SEX_FACTOR <- factor(ego_dat$SEX)
ego_dat$DENSITY <- dens[["density"]] #  getting values out of tibble format
ego_dat$RACE_DIVERSITY <- race_diversity[["entropy"]]
ego_dat$MEAN_ALTEREDUC <- mean_altereduc[["result"]]
---
title: "Network Analysis with R"
library(MASS)
ego_dat_nomiss <- na.omit(ego_dat[, c("HAPPY_FACTOR", "NUMGIVEN", "DENSITY",
"MEAN_ALTEREDUC", "RACE_DIVERSITY",
"EDUC", "AGE", "RACE_FACTOR",
"SEX_FACTOR")])
summary(happy_mod1 <- polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY,
data = ego_dat_nomiss))
summary(happy_mod2 <- polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY + EDUC + AGE +
RACE_FACTOR + SEX_FACTOR,
data = ego_dat_nomiss))
summary(happy_mod3 <- polr(HAPPY_FACTOR ~ NUMGIVEN + DENSITY + EDUC + AGE +
RACE_FACTOR + SEX_FACTOR + MEAN_ALTEREDUC +
RACE_DIVERSITY, data = ego_dat_nomiss))
url4 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_egonetworks.csv"
egonets <- read.csv(file = url4)
head(egonets)
head(egonets)
egonets$netsize <- ifelse(egonets$NUMGIVEN == 6, 5, egonets$NUMGIVEN)
egonets$netsize <- ifelse(egonets$NUMGIVEN == 6, 5, egonets$NUMGIVEN)
egonets <- egonets[!is.na(egonets$NUMGIVEN), ] #欠損値処理
egonets$netsize <- ifelse(egonets$NUMGIVEN == 6, 5, egonets$NUMGIVEN)
egonets <- egonets[!is.na(egonets$NUMGIVEN), ] #欠損値処理
ego_dat_fromonefile <- egonets[, 1:13]
create_alter_data <- function(egonets, netsize, var_names, egoID){
# Arguments:
# egonets: ego network data frame
# netsize: vector of ego network size
# var_names: names of variables to put on alter data frame (assumed to be
# var.name1, var.name2, for each alter)
# egoID: name of id of ego on ego network data frame
# creating empty list to hold output for each variable:
overall_list <- list()
# taking out the isolates as they have no alters:
egonets_noisolates <- egonets[netsize > 0, ]
# redefining network size after taking out isolates:
netsize_updated <- netsize[netsize > 0]
# running over each variable name:
for (p in 1:length(var_names)){
var_list <- list()
alter_list <- list()
# running over each ego:
for (x in 1:nrow(egonets_noisolates)){
# getting alter id number:
alter_nums <- rep(1:netsize_updated[x], times = 1)
# Now we grab the alter columns for that ego and put those
# values in a larger list so we can stack them later on
# into one big vector (one for each variable of interest)
alt_cols <- paste(rep(var_names[p], each = netsize_updated[x]),
alter_nums, sep = "")
var_list[[x]] <- egonets_noisolates[x, alt_cols]
alter_list[[x]] <- alter_nums
}
# stacking all alter values into one long column
var <- unlist(var_list)
overall_list[[p]] <- var
}
# putting all new variables together:
dat <- data.frame(do.call(data.frame, overall_list))
# putting useful column names on data frame
colnames(dat) <- var_names
# adding egoID and alterID to data frame:
dat <- cbind(rep(egonets_noisolates[, egoID], netsize_updated),
unlist(alter_list), dat)
colnames(dat)[1:2] <- c(egoID, "alterID")
return(dat)
}
alter_dat_fromonefile <- create_alter_data(egonets = egonets,
netsize = egonets$netsize,
var_names = c("AGE", "EDUC", "RACE",
"SEX", "RELIG"),
egoID = "CASEID")
head(alter_dat_fromonefile)
create_alteralter_data <- function(egonets, netsize, aa_tie_data,
egoID, max_alter){
# Arguments:
# egonets: ego network data frame
# netsize: vector of ego network size
# aa_tie_data : data for each ego showing ties between alters;
# assumed to be ordered by 1-2; 1-3; 1-4; 1-5, etc. on the columns
# egoID: name of id of ego on ego network data frame
# max_alter: maximum of number of alter of which alter-alter tie
# data was reported on
overall_list <- list()
# taking out the isolates and those
# with only one alter as they have no alter-alter ties
egonets_noisolates <- egonets[netsize > 1, ]
# also taking out the
# isolates and those with only one alter
# for the alter-alter tie input data
alteralter_tie_data <- aa_tie_data[netsize > 1, ]
# redefining network size after taking out isolates:
netsize_updated <- netsize[netsize > 1]
# defining possible alter-alter ties
alter_ids <- t(combn(max_alter, 2))
# running over each ego:
for (x in 1:nrow(egonets_noisolates)){
# First we create a data frame based on the ego ids, the possible
# alter-alter ties and the weights for each alter-alter tie,
# based on the  input data for that ego
alter_dat_row <- data.frame(egoID = egonets_noisolates[x, egoID],
alter_ids,
weight = unlist(alteralter_tie_data[x, ]))
# Here we reduce some of the rows (corresponding to alter-alter ties)
# if ego had less than the max number of alters or if some
# of the alter-alter ties are not present (assumed if value
# is equal to 0 or NA)
alter_dat_row <- alter_dat_row[alter_dat_row[, 2] <= netsize_updated[x] &
alter_dat_row[, 3] <= netsize_updated[x] &
!is.na(alter_dat_row$weight) &
alter_dat_row$weight != 0, ]
overall_list[[x]] <- alter_dat_row
}
#putting all alter-alter ties, by ego, in one data frame:
alter_alter_dat <- do.call(rbind, overall_list)
#putting useful column names on the data frame:
colnames(alter_alter_dat) <- c(egoID, "source", "target", "weight")
rownames(alter_alter_dat) <- 1:nrow(alter_alter_dat)
return(alter_alter_dat)
}
aa_tie_data <- egonets[, 64:73]
alteralter_dat_fromonefile <- create_alteralter_data(egonets = egonets,
netsize = egonets$netsize,
aa_tie_data = aa_tie_data,
egoID = "CASEID",
max_alter = 5)
head(alteralter_dat_fromonefile)
egonetlist2 <- egor(alters = alter_dat_fromonefile,
egos = ego_dat_fromonefile,
aaties = alteralter_dat_fromonefile,
alter_design = list(max = 5),
ID.vars = list(ego = "CASEID", alter = "alterID",
source = "source", target = "target"))
egonetlist2
library(sna)
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_advice.csv"
advice_data_frame <- read.csv(file = url1)
head(advice_data_frame)
advice_edgelist <- advice_data_frame[advice_data_frame$advice_tie == 1, ]
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_attributes.csv"
attributes <- read.csv(file = url2)
attributes
krack_advice <- network(x = advice_edgelist, directed = T,
vertices = attributes)
krack_advice
url3 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_friendship.csv"
friends_data_frame <- read.csv(file = url3)
head(friends_data_frame)
friends_edgelist <- friends_data_frame[friends_data_frame$friendship_tie == 1, ]
friends_edgelist <- friends_data_frame[friends_data_frame$friendship_tie == 1, ]
krack_friendship <-  network(x = friends_edgelist, directed = T,
vertices = attributes)
library(GGally)
indeg_advice <- degree(krack_advice, cmode = "indegree")
ggnet2(krack_advice, node.color = "LEVEL", node.size = indeg_advice,
palette = c("1" = "navy", "2" = "blue", "3" = "lightskyblue"),
edge.size = .5, arrow.size = 3,  arrow.gap = 0.02,
edge.color = "grey80") +
guides(size = "none")
indeg_friendship <- degree(dat = krack_friendship, cmode = "indegree")
ggnet2(krack_friendship, node.color = "LEVEL", node.size = indeg_friendship,
palette = c("1" = "navy", "2" = "blue", "3" = "lightskyblue"),
edge.size = .5, arrow.size = 3, arrow.gap = 0.02,
edge.color = "grey80") +
guides(size = "none")
dyadcensus_friendship <- dyad.census(krack_friendship)
dyadcensus_friendship
recip_friendship <- grecip(dat = krack_friendship, measure = "dyadic.nonnull")
recip_friendship
recip_advice <- grecip(dat = krack_advice, measure = "dyadic.nonnull")
recip_advice
cug_recip <- cug.test(dat = krack_friendship, FUN = grecip,
mode = c("digraph"),
cmode = c("edges"), reps = 1000,
FUN.args = list(measure = "dyadic.nonnull"))
cug_recip
---
title: "Network Analysis with R"
cug_recip$obs.stat
summary(cug_recip$rep.stat)
table(attributes$LEVEL)
same_level <- outer(attributes$LEVEL, attributes$LEVEL, "==")
dyad_mat_function <- function(dat){
# Arguments:
# dat: network object
# getting matrix form of network
mat <- as.matrix(dat)
# putting NA diagonal as we don’t want to consider self-ties
diag(mat) <- NA
# Next, we do a little trick where we take the matrix and
# add it to its transpose, yielding a matrix of 0s, 1s
# and 2s. If it is null, the resulting value will be 0
# (neither ij nor ji exists); if it is asymmetric there
# will be a 1 (as ij or ji exists but not both); and
# if it is mutual there will be a 2 (as there are ties
# from ij and ji).
dyad_mat <- mat + t(mat)
# Now we label for ease of interpretation:
dyad_mat[dyad_mat == 0] <- "null"
dyad_mat[dyad_mat == 1] <- "asym"
dyad_mat[dyad_mat == 2] <- "mut"
return(dyad_mat)
}
friends_dyads <- dyad_mat_function(krack_friendship)
friends_dyads[1:5, 1:5]
table(friends_dyads) / 2
table(friends_dyads[same_level == TRUE]) / 2
table(friends_dyads[same_level == FALSE]) / 2
advice_dyads <- dyad_mat_function(krack_advice)
advice_dyads[1:5, 1:5]
advice_dyads <- dyad_mat_function(krack_advice)
advice_dyads[1:5, 1:5]
table(friends_dyads, advice_dyads) / 2
triads_friendship <- triad.census(krack_friendship)
triads_friendship
triads_friendship <- triad.census(krack_friendship)
triads_friendship
triads_advice <- triad.census(krack_advice)
triads_advice
triads_advice <- triad.census(krack_advice)
triads_advice
triad_data <- data.frame(advice = t(triads_advice),
friendship = t(triads_friendship))
triad_data
count_triads_function <- function(dat, triad_names){
# Arguments:
# dat: the network object
# triad_names: the name of the triad type
triads <- triad.census(dat) # calculating the triad census
triads[1, triad_names] # grabbing counts of triad of interest
}
---
title: "Network Analysis with R"
count_triads_function(krack_advice, triad_names = c("030T"))
cug_triads_advice <- cug.test(krack_advice,
FUN = count_triads_function,
mode = c("digraph"),
cmode = c("dyad.census"), reps = 1000,
FUN.args = list(triad_names = c("030T")))
cug_triads_advice
cug_triads_friendship <- cug.test(krack_friendship,
FUN = count_triads_function,
mode = c("digraph"),
cmode = c("dyad.census"), reps = 1000,
FUN.args = list(triad_names = c("030T")))
cug_triads_friendship
cug_triads_friendship$obs.stat
summary(cug_triads_friendship$rep.stat)
cug_triads_friendship2 <- cug.test(krack_friendship,
FUN = count_triads_function,
mode = c("digraph"),
cmode = c("dyad.census"), reps = 1000,
FUN.args = list(triad_names = c("120U")))
cug_triads_friendship2
source("https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/R/CUGtest_alltriads.R")
CUG_test_table <- CUGtest_alltriads(dat = krack_friendship,
mode = "digraph",
cmode = "dyad.census", reps = 1000)
CUG_test_table
gtrans(dat = krack_advice, measure = "weak")
