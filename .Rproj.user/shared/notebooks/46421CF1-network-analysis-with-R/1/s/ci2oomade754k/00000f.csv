"0","dyad_mat_function <- function(dat){"
"0","  # Arguments:"
"0","  # dat: network object"
"0",""
"0","  # getting matrix form of network"
"0","  mat <- as.matrix(dat) "
"0","  "
"0","  # putting NA diagonal as we donâ€™t want to consider self-ties"
"0","  diag(mat) <- NA "
"0",""
"0","  # Next, we do a little trick where we take the matrix and "
"0","  # add it to its transpose, yielding a matrix of 0s, 1s "
"0","  # and 2s. If it is null, the resulting value will be 0 "
"0","  # (neither ij nor ji exists); if it is asymmetric there"
"0","  # will be a 1 (as ij or ji exists but not both); and "
"0","  # if it is mutual there will be a 2 (as there are ties "
"0","  # from ij and ji)."
"0","  dyad_mat <- mat + t(mat) "
"0",""
"0","  # Now we label for ease of interpretation:"
"0","  dyad_mat[dyad_mat == 0] <- ""null"" "
"0","  dyad_mat[dyad_mat == 1] <- ""asym"""
"0","  dyad_mat[dyad_mat == 2] <- ""mut"""
"0","  "
"0","  return(dyad_mat)"
"0","}"
